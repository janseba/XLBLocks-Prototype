/*

 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.

 * See LICENSE in the project root for license information.

 */



'use strict';
(function () {

	Office.onReady()
		.then(function() {
			$(document).ready(function () {
				if(!Office.context.requirements.isSetSupported('ExcelApi', 1.7)) {
					console.log('Sorry. The tutorial add-in uses Excel.js APIs that are not available in your version of Office');
				}
				
				$('#create-table').click(createTable);
				$('#filter-table').click(filterTable);
				$('#sort-table').click(sortTable);
				$('#create-chart').click(createChart);
				$('#freeze-header').click(freezeHeader);
				$('#open-dialog').click(openDialog);
			});
		});													  

			// TODO3: Add handlers and business logic functions here.
		function createTable() {
			Excel.run(function (context) {

				// TODO4: Queue table creation logic here.
				const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
				const expenseTable = currentWorksheet.tables.add("A1:D1", true /*hasHeaders*/);
				expenseTable.name = "ExpensesTable";

				// TODO5: Queue commands to populate the table with data.
				expenseTable.getHeaderRowRange().values = [["Date","Merchant","Category","Amount"]];

				expenseTable.rows.add(null /*add at the end*/, [
						["1/1/2017","The Phone Company","Communications","120"],
						["1/2/2017","Northwind Electric Cars","Transportation","142.33"],
						["1/5/2017","Best For You Organics Company","Groceries","27.9"],
						["1/10/2017","Coho Vineyard","Restaurant","33"],
						["1/11/2017","Bellows College","Education","350.1"],
						["1/15/2017","Trey Research","Other","135"],
						["1/15/2017","Best For You Organics Company","Groceries","97.88"]
					]);

				// TODO6: Queue commands to format the table
				expenseTable.columns.getItemAt(3).getRange().numberFormat = [['€#,##0.00']];
				expenseTable.getRange().format.autofitColumns();
				expenseTable.getRange().format.autofitRows();

				return context.sync();
			})
			.catch(function(error) {
				console.log("Error: " + error);
				if (error instanceof OfficeExtension.Error) {
					console.log("Debug info: " + JSON.stringify(error.debugInfo));
				}
			});
		}
	function filterTable() {
		Excel.run(function (context) {
			var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
			var expensesTable = currentWorksheet.tables.getItem('ExpensesTable');
			var categoryFilter = expensesTable.columns.getItem('Category').filter;
			categoryFilter.applyValuesFilter(["Education","Groceries"]);

			return context.sync();
		})
		.catch(function (error) {
			console.log("Error: " + error);
			if (error instanceof OfficeExtension.Error) {
				console.log("Debug info: " + JSON.stringify(error.debugInfo));
			}
		});
	}
	function sortTable() {
		Excel.run(function (context) {
			var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
			var expensesTable = currentWorksheet.tables.getItem('ExpensesTable');
			var sortFields = [
				{
					key: 1, // Merchant column
					ascending: false,
				}
			];

			expensesTable.sort.apply(sortFields);
			
			return context.sync();
		})
		.catch(function (error) {
			console.log("Error: " + error);
			if (error instanceof OfficeExtension.Error) {
				console.log("Debug info:" + JSON.stringify(error.debugInfo));
			}
		});
	}
	function createChart() {
		Excel.run(function (context) {

			// TODO01: Queue commands to get the range of the data to be charted
			var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
			var expensesTable = currentWorksheet.tables.getItem('ExpensesTable');
			var dataRange = expensesTable.getDataBodyRange();

			// TODO02: Queue command to create the chart and define its type.
			var chart = currentWorksheet.charts.add('ColumnClustered', dataRange, 'auto');

			// TODO03: Queue commands to position and format the chart.
			chart.setPosition("A15", "F30");
			chart.title.text = "Expenses";
			chart.legend.position = "right"
			chart.legend.format.fill.setSolidColor("white");
			chart.dataLabels.format.font.size = 15;
			chart.dataLabels.format.font.color = "black";
			chart.series.getItemAt(0).name = 'Value in €';

			return context.sync();
		})
		.catch(function (error) {
			console.log("Error: " + error);
			if (error instanceof OfficeExtension.Error) {
				console.log("Debug info: " + JSON.stringify(error.debugInfo));
			}
		});
	}
	function freezeHeader() {
		Excel.run(function (context) {
			// TODO1: Queue commands to keep the header visible when the user scrolls.
			var currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
			currentWorksheet.freezePanes.freezeRows(1);

			return context.sync();
		})
		.catch(function (error) {
			console.log("Error :" + error);
			if (error instanceof OfficeExtension.Error) {
				console.log("Debug info: " + JSON.stringify(error.debugInfo));
			}
		});
	}
	var dialog = null;
	function openDialog() {
		// TODO01: Call the Office Common API that opens a dialog
		Office.context.ui.displayDialogAsync(
			'https://localhost:3000/popup.html',
			{height: 45, width: 55},

			// TODO2: Add callback parameter.
			function (result) {
				dialog = result.value;
				dialog.addEventHandler(Microsoft.Office.WebExtension.EventType.DialogMessageReceived, procesMessage);
			}
			)
	}
	function processMessage(arg) {
		$('user-name').text(arg.message);
		dialog.close()
	}

})();


